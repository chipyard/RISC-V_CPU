module conuni(input logic [6:0] funct7, opcode, //7-bit
        input logic [4:0] rs1, rs2, rd, // 5-bit
        input logic [2:0] funct3, // 3-bit
        input logic [11:0] imm12, // 12-bit
        input logic [19:0] imm20, // 20-bit
        input logic [2:0] instruction_type, // sent from decoder, 01 is R type, 10 is I type, 11 is U type
        output logic [3:0] aluop, // 4-bit alu opcode value from table
        output logic alusrc, // write enable for the register, if immediate = 0 and if not immediate = 1
        output logic [1:0] regsel, // always want to take the output of the alu
        output logic regwrite, // always want to write to register
        output logic gpio_we); // 1 if there is an I/O instruction and 0 if there is not an I/O instruction 

        always_comb begin
            //default
            alusrc = 1'b0; // equal 1 for immediate instruction and equal 0 for not immediate instructions
            regsel = 2'b10; // we always want
            regwrite = 1'b1; // we want to always write to register
            gpio_we = 1'b0; // the majority instructions are not I/O instructions

            if(instruction_type == 3'b001) begin // Instruction is R-type
                if(funct7 == 7'b0000000 && funct3 == 3'b000 && opcode == 7'b0110011) begin // ADD instruction
                    aluop = 4'b0011; //opcode for add instruction
                end
                
                if(funct7 == 7'b0100000 && funct3 == 3'b000 && opcode == 7'b0110011) begin // SUB instruction
                    aluop = 4'b0100; //opcode for sub instruction
                end
                
                if(funct7 == 7'b0000001 && funct3 == 3'b000 && opcode == 7'b0110011) begin // MUL instruction
                    aluop = 4'b0101; //opcode for MUL instruction
                end

                if(funct7 == 7'b0000001 && funct3 == 3'b001 && opcode == 7'b0110011) begin // MULH instruction
                    aluop = 4'b0110; 
                end

                if(funct7 == 7'b0000001 && funct3 == 3'b011 && opcode == 7'b0110011) begin // MULHU instruction
                    aluop = 4'b0111;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b010 && opcode == 7'b0110011) begin // SLT instruction
                    aluop = 4'b1100;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b011 && opcode == 7'b0110011) begin // SLTU instruction
                    aluop = 4'b1101;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b111 && opcode == 7'b0110011) begin // AND instruction
                    aluop = 4'b0000;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b110 && opcode == 7'b0110011) begin // OR instruction
                    aluop = 4'b0001;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b100 && opcode == 7'b0110011) begin // XOR instruction
                    aluop = 4'b0010;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b001 && opcode == 7'b0110011) begin // SLL instruction
                   aluop =  4'b1000;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b101 && opcode == 7'b0110011) begin // SRL instruction
                   aluop = 4'b1001;
                end

                if(funct7 == 7'b0100000 && funct3 == 3'b101 && opcode == 7'b0110011) begin // SRA instruction
                    aluop = 4'b1010;
                end

                if(imm12 == 12'hf02 && funct3 == 3'b001 && opcode == 7'h73) begin // CSRRW HEX Output instruction
                    aluop = 4'bXXXX;
                    alusrc = 1'bX;
                    regsel = 2'bXX;
                    regwrite = 1'b0;
                    gpio_we = 1'b1;
                end

                if(imm12 == 12'hf00 && funct3 == 3'b001 && opcode == 7'h73) begin // CSRRW SW Input Instruction
                    aluop = 4'bXXXX;
                    alusrc = 1'bX;
                    regsel = 2'b00;
                end
            end
                
            
            if(instruction_type == 3'b010) begin // Instruction is I-type
                if(funct3 == 3'b000 && opcode == 7'b0010011) begin // ADDI instruction
                    aluop = 4'b0011;
                    alusrc = 1'b1;
                end

                if(funct3 == 3'b111 && opcode == 7'b0010011) begin // ANDI instruction
                    aluop = 4'b0000;
                    alusrc = 1'b1;
                end

                if(funct3 == 3'b110 && opcode == 7'b0010011) begin // ORI instruction
                    aluop = 4'b0001;
                    alusrc = 1'b1;
                end

                if(funct3 == 3'b100 && opcode == 7'b0010011) begin // XORI instruction
                    aluop = 4'b0010;
                    alusrc = 1'b1;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b001 && opcode == 7'b0010011) begin // SLLI instruction
                    aluop = 4'b1000;
                    alusrc = 1'b1;
                end

                if(funct7 == 7'b0100000 && funct3 == 3'b101 && opcode == 7'b0010011) begin // SRAI instruction
                    aluop = 4'b1011; 
                    alusrc = 1'b1;
                end

                if(funct7 == 7'b0000000 && funct3 == 3'b101 && opcode == 7'b0010011) begin // SRLI instruction
                    aluop = 4'b1001;
                    alusrc = 1'b1;
                end
            end


            if(instruction_type == 3'b011) begin // Instruction is U-type
                if(opcode == 7'b0110111) begin // LUI instruction
                    aluop = 4'bXXXX;
                    alusrc = 1'bX;
                    regsel = 2'b01;
                end                
            end
        end
endmodule

