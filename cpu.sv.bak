module cpu(input logic clk, //TODO: VERIFY CLOCK BITS
           input logic rst,
           input logic [31:0] gpio_in,
           output logic [31:0] gpio_out);

        //internal signals
        logic [11:0] PC_FETCH;
        logic [31:0] instruction_EX;
        logic [6:0] opcode_EX, funct7_EX;
        logic [2:0] itype_EX;
        logic [18:0] gpio_in_WB;
        logic [2:0] funct3_EX;
        logic [11:0] imm12_EX;
        logic [19:0] imm20_EX;
        logic gpio_we_EX;
        logic [4:0] rs1_EX, rs2_EX, rd_EX, rd_WB;
        logic [31:0] instruction_WB;
        logic alusrc_EX;
        logic regwrite_EX;
        logic regwrite_WB;
        logic [1:0] regsel_EX, regsel_WB;
        logic [3:0] aluop_EX;
        logic [31:0] A_EX, B_EX;
        logic [31:0] R_EX, R_WB;
        logic [31:0] writedata_WB;
        logic [4:0] readdata1_EX, readdata2_EX;

        // how do we know which signals we need?
        // Control unit module needs to have inputs read from instruction decoder wires
        // Control unit outputs need to drive register and alu inputs as well


        //////////////////// Separation between wires and components in the cpu ////////////////////


        //initializing instruction memory (RAM)
        logic [31:0] instruction_mem [4095:0];
        initial begin
                $readmeh("hexcode.txt", instruction_mem); //file to initialize instruction RAM
        end

        always_ff @(posedge clk) begin
                if (rst) begin
                        instruction_EX <= 32'b0;
                        PC_FETCH <= 12'b0;
                end
                else begin
                        instruction_EX <= instruction_mem[PC_FETCH];
                        PC_FETCH <= PC_FETCH + 12'b1;
                end

                rd_WB <= rd_EX; //TODO: FIGURE OUT HOW THIS IS STRUCTURED
                
                instruction_WB <= {instruction_EX[31:12], 12'b0};
                
                regwrite_WB <= regwrite_EX; //async assign with write neablefor regwrite_WB and regwrite_EX
                
                //async everything happens and sync happens in sequential
                regsel_WB <= regsel_EX;
                
                gpio_in_WB <= gpio_in;
                
                R_WB <= R_EX;
                
                //gpio_we_EX <= gpio_we;
                
                //gpio_we select register
                if(gpio_we_EX)
                        gpio_out <= readdata1_EX;
        end

        //multiplexer using regsel_WB as the select
        always_comb begin
                if(regsel_WB == 0) begin // 0
                        writedata_WB = gpio_in_WB;
                end
                if(regsel_WB == 1) begin // 1
                        writedata_WB = instruction_WB;
                end
                if(regsel_WB == 2) begin // 2
                        writedata_WB = R_WB;
                end
        end

        //multiplexer using alusrc_EX as the select
        always_comb begin
                if(alusrc_EX == 0) begin // 0
                        B_EX = readdata2_EX; //Instruction
                end
                if(alusrc_EX == 1) begin // 1
                        B_EX = {{20{imm12_EX[31]}}, instruction_EX[31:20]}; //Sign Extend
                end
        end
        
        // instruction decoder module
        insdec id(.in(instruction_EX),
        .funct7(funct7_EX),
        .opcode(opcode_EX),
        .rs1(rs1_EX),
        .rs2(rs2_EX),
        .rd(rd_EX),
        .funct3(funct3_EX),
        .imm12(imm12_EX),
        .imm20(imm20_EX),
        .instruction_type(itype_EX));

        // control unit module
        conuni cu(.funct7(funct7_EX),
        .opcode(opcode_EX), .rs1(rs1_EX),
        .rs2(rs2_EX),
        .rd(rd_EX),
        .funct3(funct3_EX),
        .imm12(imm12_EX),
        .imm20(imm20_EX),
        .instruction_type(itype_EX),
        .aluop(aluop_EX),
        .alusrc(alusrc_EX),
        .regsel(regsel_EX),
        .regwrite(regwrite_EX),
        .gpio_we(gpio_we_EX));

         // register file module
        regfile rf(.clk(clk),
        .rst(rst),
        .we(regwrite_WB),
        .readaddr1(rs1_EX),
        .readaddr2(rs2_EX),
        .writeaddr(rd_WB),
        .writedata(writedata_WB),
        .readdata1(readdata1_EX),
        .readdata2(readdata2_EX));

        // alu module
        alu logicunit(.A(A_EX),
        .B(B_EX),
        .op(aluop_EX),
        .R(R_EX),
        .zero());
endmodule

